---
title: PXF Developer Concepts
---
The PXF SDK provides the classes and interfaces that you use to implement support for new external data sources, data formats, and data access APIs in Greenplum Database. You can also use the PXF SDK to extend existing external data sources, formats, and APIs.

The PXF API defines the data structures, classes, and interfaces that you need to map external data into a tabular form suitable for Greenplum Database, and vice-versa.

When you develop with the PXF SDK, you ultimately build a JAR file. The Greenplum Database administrator deploys your JAR file to the Greenplum Database cluster. The Greenplum Database end user accesses your external data source/format/API when he invokes a `CREATE EXTERNAL TABLE` command specifying the `pxf` protocol.

This topic introduces concepts central to developing with the PXF SDK. These concepts will be discussed in detail in later sections of this guide.

## <a id="architecture"></a>Plug-ins, Connectors, and Profiles

The PXF API includes the *Fragmenter* class and read and write *Accessor* and *Resolver* interfaces. You implement theses classes and interfaces when you extend PXF to add support for a new external data source, data format, or data access API. The classes that you create are called *plug-ins*. A set of a single *Fragmenter*, *Accessor*, and *Resolver* plug-in class together comprise a *read connector*. An *Accessor* and *Resolver* plug-in pair comprise a *write connector*. A single *Accessor* or *Resolver* class may support both read and write operations.

A *profile* is a simple name mapping to a set of connector plug-in class names. You or the Greenplum Database administrator may choose to configure one or more profiles for your connector as a convenience for the Greenplum Database end user.

## <a id="dataflow"></a>Data Flow

PXF in Greenplum Database has two components:

- A C shared library that is loaded into Greenplum Database when the `CREATE EXTENSION pxf` comand is invoked on a database.
- A Java service, referred to as the PXF agent, a single JVM process on each Greenplum Database segment host.

Operations on Greenplum Database external tables created with the `pxf` protocol are first routed to the PXF C shared library extension then on to the PXF agent.

The PXF C library validates PXF-specific parameters when the end user invokes the `CREATE EXTERNAL TABLE` command. It is not until the end user `SELECT`s (read) or `INSERT`s into (write) the external table that Greenplum Database initiates communication with the PXF agent, which in turn invokes a connector's plug-in classes.

The PXF agent initiates a read operation on the external data source when the user runs a `SELECT` command on an external table created with the `pxf` protocol. The PXF agent spawns a thread that invokes the connector *Fragmenter*, which splits data from an external data source into a list of fragments that can be read in parallel. A read *Accessor* reads a single fragment from an external data source and produces a list of records/rows. The read *Resolver* deserializes a record/row into fields. Finally, PXF translates these fields into Greenplum Database table column values. 

<img src="../graphics/pxfreadwrite.png" class="image" />

The PXF agent initiates a write operation to the external data source when the user invokes an `INSERT` or similar command on an external table created with the `pxf` protocol. When writing to an external data source, PXF translates Greenplum Database table column values to fields and invokes the write *Resolver*. The write *Resolver* serializes these fields into a record. The write *Accessor* writes a record directly to the external data source.

